<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thick Client on Cyber Security Wiki</title><link>https://cyber-security.wiki/docs/application-security/thick-client/</link><description>Recent content in Thick Client on Cyber Security Wiki</description><generator>Hugo</generator><language>en</language><atom:link href="https://cyber-security.wiki/docs/application-security/thick-client/index.xml" rel="self" type="application/rss+xml"/><item><title>Checklist</title><link>https://cyber-security.wiki/docs/application-security/thick-client/checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/checklist/</guid><description>Checklist # Reconnaisance (Information Gathering) # Information Gathering (via tool like CFF Explorer) (https://www.hackingarticles.in/thick-client-penetration-testing-information-gathering/) Identify architecture - Two-tier or Three-tier (https://medium.com/@GacheruEvans/2-tier-vs-3-tier-architecture-26db56fe7e9c) Is the App - Internet or Intranet based (via tool like Wireshark) (https://powell-software.com/resources/blog/difference-between-intranet-and-internet/) Identify - Proxy-aware or Proxy-Unaware (https://www.browserstack.com/docs/app-live/troubleshooting/proxy-aware) Identify technologies used on Client-Side Identify technologies used on Server-Side Identify the Proccess ID (https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/finding-the-process-id, https://www.geeksforgeeks.org/get-process-id-of-linux-foreground-and-background-processes/) Identify application entry points Identify user roles Identify Network Communication - Ports and Protocols in use (https://www.</description></item><item><title>Learning Process - Linux</title><link>https://cyber-security.wiki/docs/application-security/thick-client/learningprocess_linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/learningprocess_linux/</guid><description> Learning Resources # Contents # Vulnerability ranking Common Vulnerabilities OWASP Desktop App Security Top 10 # https://owasp.org/www-project-desktop-app-security-top-10/
Some Common Vulnerabilities # https://payatu.com/blog/thick-client-penetration-testing/
https://payatu.com/blog/pentesting-linux-thick-client-applications/
Code Execution
https://www.exploit-db.com/exploits/50385 https://www.exploit-db.com/exploits/47231 https://www.exploit-db.com/exploits/51331 (Via Missing file) Buffer Overflow
https://www.exploit-db.com/exploits/47178 Out of bound crash
https://www.exploit-db.com/exploits/35081 Forensics
/proc/[PID]/ directory https://docs.kernel.org/filesystems/proc.html#:~:text=The%20directory%20%2Fproc%20contains LD_PRELOAD attack https://www.goldsborough.me/c/low-level/kernel/2016/08/29/16-48-53-the_-ld_preload-_trick/ Generating and analyzing core dumps https://opensource.com/article/20/8/linux-dump https://opensource.com/article/20/7/procdump-linux https://www.cse.unsw.edu.au/~learn/debugging/modules/gdb_coredumps/ Network traffic analysis
Traffic capture https://opensource.com/article/20/1/wireshark-linux-tshark https://opensource.com/article/18/10/introduction-tcpdump Proxy https://linuxhint.com/proxychains-tutorial/ Privilege Escalation
https://www.exploit-db.com/exploits/51180 https://www.exploit-db.com/exploits/50689</description></item><item><title>Learning Process - Windows</title><link>https://cyber-security.wiki/docs/application-security/thick-client/learningprocess_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/learningprocess_windows/</guid><description>Learning Resources # Contents # Sample vulnerable thick client applications Vulnerability ranking Common Vulnerabilities Video Reference Sample vulnerable Thick Client application # DVTA - Damn Vulnerable Thick Client Application # https://github.com/srini0x00/dvta
https://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-2/ https://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-part-2/ https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/ BetaBank # https://github.com/NetSPI/BetaFast/tree/master/BetaBank
BetaFast # https://github.com/NetSPI/BetaFast/tree/master/BetaFast
https://medium.com/@abhishek.offsec/hacking-the-betafast-betabank-thick-client-applications-fe8b6226f84a OWASP Desktop App Security Top 10 # https://owasp.org/www-project-desktop-app-security-top-10/
Some Common Vulnerabilities # https://payatu.com/blog/thick-client-penetration-testing/
DLL Hijacking
https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking https://hackerone.com/reports/1636566 https://securitycafe.ro/2023/06/19/dll-hijacking-finding-vulnerabilities-in-pestudio-9-52/ https://www.cyberark.com/resources/threat-research-blog/dllspy-tighten-your-defense-by-discovering-dll-hijacking-easily https://www.exploit-db.com/exploits/51678 DLL Side-loading
https://www.mandiant.com/resources/reports/dll-side-loading-thorn-side-anti-virus-industry https://helpdeskgeek.com/windows-11/what-is-the-winsxs-folder-why-is-it-huge-and-how-to-cleanup/ Sensitive credentials leaked in source code on Github</description></item><item><title>Tools - Linux</title><link>https://cyber-security.wiki/docs/application-security/thick-client/tools_linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/tools_linux/</guid><description> Tools used in Linux Thick client pentesting # Information Gathering # file (https://man7.org/linux/man-pages/man1/file.1.html) ldd (https://man7.org/linux/man-pages/man1/ldd.1.html) strings (https://man7.org/linux/man-pages/man1/strings.1.html) apt (https://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html) strace (https://man7.org/linux/man-pages/man1/strace.1.html) ltrace (https://man7.org/linux/man-pages/man1/ltrace.1.html) pspy (https://github.com/DominicBreuker/pspy) Reverse Engineering # IDA/IDA Pro (https://hex-rays.com/ida-free/, https://hex-rays.com/ida-pro/) Ghidra (https://github.com/NationalSecurityAgency/ghidra) Memory Analysis # gcore (https://man7.org/linux/man-pages/man1/gcore.1.html) kill (https://man7.org/linux/man-pages/man1/kill.1.html) Procdump (https://github.com/Sysinternals/ProcDump-for-Linux) gdb (https://man7.org/linux/man-pages/man1/gdb.1.html) Traffic Analysis # Wireshark (https://www.wireshark.org/) Tshark (https://www.wireshark.org/docs/man-pages/tshark.html) tcpdump (https://www.tcpdump.org/manpages/tcpdump.1.html) proxychains (https://github.com/haad/proxychains) Burp Suite (https://portswigger.net/burp) mitm relay (https://github.com/jrmdev/mitm_relay)</description></item><item><title>Tools - Windows</title><link>https://cyber-security.wiki/docs/application-security/thick-client/tools_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/tools_windows/</guid><description> Tools used in Windows Thick client pentesting # Information Gathering # CFF explorer (https://ntcore.com/?page_id=388) SysInternal Suite (https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite) Strings Process Monitor Process Explorer Sigcheck Decompile and Debug # DnSpy (https://github.com/dnSpy/dnSpy/releases) ILSpy (https://github.com/icsharpcode/ILSpy/releases) DotPeek (https://www.jetbrains.com/decompiler/download/#section=web-installer) Frida (https://github.com/frida/frida/releases) Ghidra (https://github.com/NationalSecurityAgency/ghidra/releases) WinDbg (https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools) Network sniffing and Proxy # Wireshark (https://www.wireshark.org/download.html) TCPView (https://learn.microsoft.com/en-us/sysinternals/downloads/tcpview) EchoMirage (https://sourceforge.net/projects/echomirage.oldbutgold.p/) Burp Suite NoPE proxy Fiddler (https://www.telerik.com/fiddler/fiddler-classic) MiTM relay (https://github.com/jrmdev/mitm_relay) System Testing # Symbolic Link Testing tools (https://github.com/googleprojectzero/symboliclink-testing-tools)</description></item></channel></rss>