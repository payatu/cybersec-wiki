<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on Cyber Security Wiki</title><link>https://cyber-security.wiki/docs/application-security/web/</link><description>Recent content in Web on Cyber Security Wiki</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://cyber-security.wiki/docs/application-security/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Charset XSS</title><link>https://cyber-security.wiki/docs/application-security/web/charset-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/web/charset-xss/</guid><description>Charset XSS # Charset XSS is useful in cases where application filters HTML special characters like &amp;lt; &amp;amp; &amp;gt;, You might have seen these characters converting back into &amp;amp;gt; &amp;amp; &amp;amp;lt; respectively.
For example consider the following codes
&amp;lt;?php if(isset($_GET[&amp;#39;xss&amp;#39;])) { echo htmlspecialchars($_GET[&amp;#39;xss&amp;#39;]); } ?&amp;gt; and similarly for DOM XSS code
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;test page&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; var bad_string = window.location.hash.substring(1); var regex = /&amp;lt;\&amp;gt;/gi; var good_string = bad_string.</description></item></channel></rss>