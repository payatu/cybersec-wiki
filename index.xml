<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cyber Security Wiki by Payatu on Cyber Security Wiki</title><link>https://cyber-security.wiki/</link><description>Recent content in Cyber Security Wiki by Payatu on Cyber Security Wiki</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://cyber-security.wiki/index.xml" rel="self" type="application/rss+xml"/><item><title>Charset XSS</title><link>https://cyber-security.wiki/docs/application-security/web/charset-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/web/charset-xss/</guid><description>Charset XSS # Charset XSS is useful in cases where application filters HTML special characters like &amp;lt; &amp;amp; &amp;gt;, You might have seen these characters converting back into &amp;amp;gt; &amp;amp; &amp;amp;lt; respectively.
For example consider the following codes
&amp;lt;?php if(isset($_GET[&amp;#39;xss&amp;#39;])) { echo htmlspecialchars($_GET[&amp;#39;xss&amp;#39;]); } ?&amp;gt; and similarly for DOM XSS code
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;test page&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; var bad_string = window.location.hash.substring(1); var regex = /&amp;lt;\&amp;gt;/gi; var good_string = bad_string.</description></item><item><title>Checklist</title><link>https://cyber-security.wiki/docs/application-security/thick-client/checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/checklist/</guid><description>Checklist # Reconnaisance (Information Gathering) # Information Gathering (via tool like CFF Explorer) Identify architecture - Two-tier or Three-tier Is the App - Internet or Intranet based (via tool like Wireshark) Identify - Proxy-aware or Proxy-Unaware Identify technologies used on Client-Side Identify technologies used on Server-Side Identify the Proccess ID Identify application entry points Identify user roles Identify Network Communication - Ports and Protocols in use Port Scanning (via tool like Nmap) Check for webapp associated with the thick client Check whether thick client app redirects to a web application Injection # OS Command Injection SQL Injection NoSQL Injection External XML Entity (XXE) XSS (Cross Site Scripting) HTML Injection XPath Injection LDAP Injection Host Header Injection CSV Injection (HTTP) Parameter Pollution Server-Side Template Injection (SSTI) Broken Authentication and Session Management # Vulnerable Authentication Flow via Response Manipulation via SQL/NoSQL Injection Via Null (Absence of) Password Use of Default Credentials Use of Hardcoded Credentials Via Memory Manipulation Via Registry Manipulation Username Enumeration Weak Lock Out Mechanism Flawed Brute-Force Protection Vulnerable Remember Password Weak Password Policy Flawed User Registration Process OAuth/OpenID SSO MFA Session based weaknesses Sensitive Data Exposure # Improper cryptographic key management Presence of sensitive data in log files Presence of sensitive data in local files Presence of sensitive data in registry Presence of sensitive data in config files Presence of hard-coded sensitive data in source code Presence of sensitive data in memory Sensitive Data Persists in Memory after Formal Logout Improper Cryptography Usage # Missing encryption Use of Weak cryptographic Keys Weak Cryptography (encryption) algorithm implemented (in Authentication) Use of old/less-secure Hashing algorithms Use of Hash values without Salting Insufficient randomness for cryptographic functions/keys Improper Authorization (Broken Access Control) # Privilege Escalation Via enabling hidden functionalities Via enabling objects (eg.</description></item><item><title>Learning Process</title><link>https://cyber-security.wiki/docs/application-security/thick-client/learningprocess/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/learningprocess/</guid><description>Learning Resources # Contents # Sample vulnerable thick client applications Vulnerability ranking Common Vulnerabilities Video Reference Sample vulnerable Thick Client application # DVTA - Damn Vulnerable Thick Client Application # https://github.com/srini0x00/dvta
https://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-2/ https://www.hackingarticles.in/thick-client-pentest-lab-setup-dvta-part-2/ https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/ BetaBank # https://github.com/NetSPI/BetaFast/tree/master/BetaBank
BetaFast # https://github.com/NetSPI/BetaFast/tree/master/BetaFast
https://medium.com/@abhishek.offsec/hacking-the-betafast-betabank-thick-client-applications-fe8b6226f84a OWASP Desktop App Security Top 10 # https://owasp.org/www-project-desktop-app-security-top-10/
Some Common Vulnerabilities # https://payatu.com/blog/thick-client-penetration-testing/
DLL Hijacking
https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking https://hackerone.com/reports/1636566 https://securitycafe.ro/2023/06/19/dll-hijacking-finding-vulnerabilities-in-pestudio-9-52/ DLL Side-loading
https://www.mandiant.com/resources/reports/dll-side-loading-thorn-side-anti-virus-industry Sensitive credentials leaked in source code on Github</description></item><item><title>Learning Process</title><link>https://cyber-security.wiki/docs/machine-learning/learning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/machine-learning/learning/</guid><description>Contents # OWASP Top 10 for Large Language Model Applications Prompt Injection Articles Prompt Injection Videos Prompt Injection CTF LLM Hacker Handbook Videos AI Attack Surface Map Research Papers OWASP Top 10 for Large Language Model Applications # https://owasp.org/www-project-top-10-for-large-language-model-applications/ Prompt Injection Articles # https://josephthacker.com/ai/2023/04/19/prompt-injection-and-mitigations.html https://josephthacker.com/ai/2023/08/25/prompt-injection-primer.html https://research.nccgroup.com/2022/12/05/exploring-prompt-injection-attacks/ https://www.lakera.ai/insights/what-is-prompt-injection Prompt Injection Videos # Attacking LLM - Prompt Injection Accidental LLM Backdoor - Prompt Tricks Defending LLM - Prompt Injection Prompt Injection 101 - Understanding Security Risks in LLM Prompt Injection CTF # GPT Prompt Attack Double Speak Chat LLM Hacker Handbook # https://doublespeak.</description></item><item><title>Tools</title><link>https://cyber-security.wiki/docs/application-security/thick-client/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cyber-security.wiki/docs/application-security/thick-client/tools/</guid><description> Tools used in Thick client pentesting # Information Gathering # CFF explorer SysInternal Suite Strings Process Monitor Process Explorer Sigcheck Decompile and Debug # DnSpy ILSpy DotPeek Frida Network sniffing and Proxy # Wireshark TCPView EchoMirage Burp Suite NoPE proxy Fiddler</description></item></channel></rss>